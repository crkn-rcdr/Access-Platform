{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://github.com/crkn-rcdr/Access-Platform/blob/master/Databases/schemas/manifest.json",
  "title": "Manifest Document Schema",
  "description": "Schema for a manifest document. The platform is expected to support two kinds of manifests: multicanvas (e.g. a collection of images corresponding to a logical item) and pdf (born-digital in our case). This is reflected in the dual properties/required entries.",
  "type": "object",
  "allOf": [
    {
      "properties": {
        "_id": { "$ref": "schemas/_util.json#/definitions/manifestNoid" },
        "slug": { "$ref": "schemas/_util.json#/definitions/slug" },
        "aliasedSlugs": {
          "$ref": "schemas/_util.json#/definitions/aliasedSlugs"
        },
        "supersededBy": {
          "allOf": [
            {
              "description": "The manifest that supersedes this one, when applicable"
            },
            { "$ref": "schemas/_util.json#/definitions/manifestNoid" }
          ]
        },
        "label": {
          "allOf": [
            { "description": "Manifest display label" },
            { "$ref": "schemas/_util.json#/definitions/iiifTextValue" }
          ]
        },
        "dmdType": {
          "description": "The type of the descriptive metadata record associated with this manifest",
          "type": "string",
          "enum": ["marc", "dc", "issueinfo"]
        },
        "public": {
          "description": "Date on which manifest was made public. Remove to take down",
          "type": "string",
          "format": "date-time"
        },
        "updateInternalmeta": {
          "allOf": [
            {
              "description": "Trigger for updating the internalmeta database with this manifest, or result of an attempted update"
            },
            { "$ref": "schemas/_util.json#/definitions/update" }
          ]
        }
      },
      "required": ["_id", "label"]
    },
    {
      "oneOf": [
        {
          "properties": {
            "frozen": {
              "description": "Date on which manifest was frozen by staff",
              "type": "string",
              "format": "date-time"
            }
          },
          "required": ["frozen"]
        },
        {
          "properties": {
            "freezeParameters": {
              "description": "Parameters that determine what happens with this 'still-fresh' manifest is frozen. This may be extended as needs require. Note that this object is required for fresh manifests, but it can be empty",
              "type": "object",
              "properties": {
                "slug": {
                  "description": "Slug that will point to this manifest when it is frozen. If the slug points to a different manifest, it will be assumed that this manifest supersedes that one.",
                  "type": "string"
                }
              }
            }
          },
          "required": ["freezeParameters"]
        }
      ]
    },
    {
      "oneOf": [
        {
          "properties": {
            "type": {
              "const": "multicanvas"
            },
            "canvases": {
              "description": "List of canvas NOIDs, corresponding to the members of this manifest",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "$ref": "schemas/_util.json#/definitions/canvasNoid"
                  },
                  "label": {
                    "allOf": [
                      {
                        "description": "Manifest-specific label for this canvas"
                      },
                      {
                        "$ref": "schemas/_util.json#/definitions/iiifTextValue"
                      }
                    ]
                  }
                },
                "required": ["id", "label"]
              }
            },
            "ocrPdf": {
              "description": "Information about the derivative full-manifest PDF. If path is not specified, a file should exist in the access object store at $id.pdf",
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "schemas/_util.json#/definitions/legacyRepoPath"
                },
                "size": { "type": "number" }
              },
              "required": ["size"]
            },
            "updatePdf": {
              "allOf": [
                {
                  "description": "Trigger for updating the manifest's single or full-page PDFs, or result of an attempted update"
                },
                { "$ref": "schemas/_util.json#/definitions/update" }
              ]
            }
          },
          "required": ["type", "canvases"]
        },
        {
          "properties": {
            "type": {
              "const": "pdf"
            },
            "master": {
              "description": "Master PDF for a born-digital object. If path is not specified, a file should exist in the access object store at $id.pdf",
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "schemas/_util.json#/definitions/legacyRepoPath"
                },
                "size": { "type": "number" }
              },
              "required": ["size"]
            },
            "masterPages": {
              "description": "List of page labels for a born-digital object",
              "type": "array",
              "items": {
                "$ref": "schemas/_util.json#/definitions/iiifTextValue"
              }
            }
          },
          "required": ["type", "master", "masterPages"]
        }
      ]
    }
  ]
}
