import { JSONSchemaType } from "ajv";
import { Manifest, schema as manifestSchema } from "../Manifest";
import { Noid, schema as noidSchema } from "../../Format/Noid";
import { Text, schema as textSchema } from "../../Util/Text";
import { FileRef, schema as fileSchema } from "../../Util/FileRef";

export interface Canvas {
  id: Noid;
  /**
   * The canvas's label in the context of this manifest.
   */
  label: Text;
}

export interface Local {
  from: "canvases";
  /**
   * The manifest's canvas list.
   */
  canvases: Canvas[];
  /**
   * Information about the derivative PDF generated by OCR.
   * If path is not specified, a file should exist in the
   * access object store at $id.pdf
   */
  ocrPdf?: FileRef;
}

export interface CanvasManifest extends Manifest, Local {}

export const schema = manifestSchema.mergeInto(
  {
    $id: "/access/manifest/canvases.json",
    title: "Canvas Manifest",
    type: "object",
    properties: {
      from: { type: "string", const: "canvases" },
      canvases: {
        type: "array",
        items: {
          type: "object",
          properties: {
            id: noidSchema.inline,
            label: textSchema.inline,
          },
          required: ["id", "label"],
        },
      },
      ocrPdf: { ...fileSchema.inline, nullable: true },
    },
    required: ["from", "canvases"],
  } as JSONSchemaType<Local>,
  true
);
