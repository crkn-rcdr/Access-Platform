import { JSONSchemaType } from "ajv";
import { Root, schema as rootSchema } from "./Root";
import { FileRef, schema as fileRefSchema } from "../Util/FileRef";
import { ImageRef, schema as imageRefSchema } from "../Util/ImageRef";
import { UriReference, schema as uriSchema } from "../Format/UriReference";
import { inherit } from "../validator";

const TAKEDOWNS = ["copyright", "privacy"];
const OCR_TYPES = ["alto", "txtmap"];

/**
 * Source information for an image in the legacy preservation repository.
 */
type CIHMSource = {
  from: "cihm";
  /** Legacy repository path. */
  path: UriReference;
};

/**
 * Source information for an image in Archivematica.
 */
type AMSource = {
  from: "am";
  aipId: string;
  objId: string;
};

type CanvasSpec = {
  /**
   * Information about the preservation source of this base image of this canvas.
   */
  source: CIHMSource | AMSource;
  /**
   * Reference to the base image file.
   */
  master: ImageRef;
  /**
   * If the canvas has been taken down from public view, this is the reason why.
   */
  takedown?: typeof TAKEDOWNS[number];
  /**
   * Reference to the PDF file generated by OCR.
   */
  ocrPdf?: FileRef;
  /**
   * OCR XML type. One of `alto` or `txtmap`.
   */
  ocrType?: typeof OCR_TYPES[number];
  /**
   * As time goes on or errors take place, some canvases may no longer be
   * referenced by a manifest. These canvases may be marked as orphans by setting
   * this flag.
   */
  orphan?: boolean;
};

/**
 * The virtual representation of the space taken up by a page of a Manifest.
 */
export type Canvas = Root & CanvasSpec;

const specSchema = {
  $id: "/canvas",
  title: "Canvas",
  type: "object",
  properties: {
    source: {
      type: "object",
      oneOf: [
        {
          properties: {
            from: { type: "string", const: "cihm" },
            path: uriSchema,
          },
          required: ["from", "path"],
          additionalProperties: false,
        },
        {
          properties: {
            from: { type: "string", const: "cihm" },
            aipId: { type: "string" },
            objId: { type: "string" },
          },
          required: ["from", "aipId", "objId"],
          additionalProperties: false,
        },
      ],
      required: ["from"],
    },
    master: imageRefSchema,
    takedown: { type: "string", enum: TAKEDOWNS, nullable: true },
    ocrPdf: { ...fileRefSchema, nullable: true },
    ocrType: { type: "string", enum: OCR_TYPES, nullable: true },
    orphan: { type: "boolean", default: false, nullable: true },
  },
  required: ["master", "source"],
} as JSONSchemaType<CanvasSpec>;

export const { schema, validate } = inherit<Canvas, Root, CanvasSpec>(
  rootSchema,
  specSchema,
  false
);
