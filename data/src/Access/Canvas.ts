import { JSONSchemaType } from "ajv";
import { Root, schema as rootSchema } from "./Root";
import { FileRef, schema as fileRefSchema } from "../Util/FileRef";
import { ImageRef, schema as imageRefSchema } from "../Util/ImageRef";
import { UriReference, schema as uriSchema } from "../Format/UriReference";

const TAKEDOWNS = ["copyright", "privacy"];
const OCR_TYPES = ["alto", "txtmap"];

/**
 * Source information for an image in the legacy preservation repository.
 */
interface CIHMSource {
  from: "cihm";
  /** Legacy repository path. */
  path: UriReference;
}

/**
 * Source information for an image in Archivematica.
 */
interface AMSource {
  from: "am";
  aipId: string;
  objId: string;
}

interface Local {
  /**
   * Information about the preservation source of this base image of this canvas.
   */
  source: CIHMSource | AMSource;
  /**
   * Reference to the base image file.
   */
  master: ImageRef;
  /**
   * If the canvas has been taken down from public view, this is the reason why.
   */
  takedown?: typeof TAKEDOWNS[number];
  /**
   * Reference to the PDF file generated by OCR.
   */
  ocrPdf?: FileRef;
  /**
   * OCR XML type. One of `alto` or `txtmap`.
   */
  ocrType?: typeof OCR_TYPES[number];
  /**
   * As time goes on or errors take place, some canvases may no longer be
   * referenced by a manifest. These canvases may be marked as orphans by setting
   * this flag.
   */
  orphan?: boolean;
}

/**
 * The virtual representation of the space taken up by a page of a Manifest.
 */
export interface Canvas extends Root, Local {}

export const schema = rootSchema.mergeInto<Canvas>(
  {
    $id: "/canvas.json",
    title: "Canvas",
    type: "object",
    properties: {
      source: {
        type: "object",
        oneOf: [
          {
            properties: {
              from: { type: "string", const: "cihm" },
              path: uriSchema.inline,
            },
            required: ["from", "path"],
            additionalProperties: false,
          },
          {
            properties: {
              from: { type: "string", const: "cihm" },
              aipId: { type: "string" },
              objId: { type: "string" },
            },
            required: ["from", "aipId", "objId"],
            additionalProperties: false,
          },
        ],
        required: ["from"],
      },
      master: imageRefSchema.inline,
      takedown: { type: "string", enum: TAKEDOWNS, nullable: true },
      ocrPdf: { ...fileRefSchema.inline, nullable: true },
      ocrType: { type: "string", enum: OCR_TYPES, nullable: true },
      orphan: { type: "boolean", default: false, nullable: true },
    },
    required: ["master", "source"],
  } as JSONSchemaType<Local>,
  true
);
